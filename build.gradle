plugins {
    id "java"
    id "idea"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.+'
}

version = "${project.mod_version}"
group = "${project.mod_namespace}"
archivesBaseName = "${project.mod_name}"

// Mojang ships Java 17 to end users in 1.18+ instead of Java 8 in 1.16.x or lower nor 16 in 1.17.x, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
    
minecraft {
    mappings channel: 'parchment', version: "${parchment_mapping_version}-${parchment_mc_version}"

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                batterybox {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')
            property 'forge.logging.console.level', 'debug'

            mods {
                batterybox {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'batterybox', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                batterybox {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"
    implementation fg.deobf("maven.modrinth:justabattery:47.2.1")
    implementation fg.deobf("mezz.jei:jei-${project.jei_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.mod_name,
                "Specification-Vendor": "canitzp",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"canitzp",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

idea {
    module {
        inheritOutputDirs = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "mC1vVReZ"
    versionNumber = "${project.mod_version}"
    versionName = "${project.mod_name} - ${project.mod_version} (for ${project.release_minecraft_versions})"
    versionType = "release"
    uploadFile = jar
    gameVersions = project.release_minecraft_versions.split("/").collect()
    loaders = project.release_mod_loaders.toLowerCase().split("/").collect()
    changelog = String.join("\n", rootProject.file("CHANGELOG.md").text.lines().takeWhile(s -> !s.isEmpty()).toList())
    syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

//noinspection UnnecessaryQualifiedReference
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv('CURSEFORGE_TOKEN')

    def mainFile = upload(1024259, jar)
    mainFile.displayName = "${project.mod_name} - ${project.mod_version} (for ${project.release_minecraft_versions})"
    mainFile.releaseType = "release"
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("CHANGELOG.md")
    for (final def modloader in "${project.release_mod_loaders}".split("/")) {
        mainFile.addModLoader("${modloader}")
    }
    for (final def java_version in "${project.release_java_versions}".split("/")) {
        mainFile.addJavaVersion("${java_version}")
    }
    for (final def minecraft_version in "${project.release_minecraft_versions}".split("/")) {
        mainFile.addGameVersion("${minecraft_version}")
    }
}